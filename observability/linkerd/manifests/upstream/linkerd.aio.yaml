---
###
### Linkerd Namespace
###
kind: Namespace
apiVersion: v1
metadata:
  name: linkerd
  annotations:
    linkerd.io/inject: disabled
  labels:
    linkerd.io/is-control-plane: "true"
    config.linkerd.io/admission-webhooks: disabled
    linkerd.io/control-plane-ns: linkerd
---
###
### Identity Controller Service RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["create"]
- apiGroups: ["apps"]
  resources: ["deployments"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-identity
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-identity
subjects:
- kind: ServiceAccount
  name: linkerd-identity
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
---
###
### Destination Controller Service
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: ["apps"]
  resources: ["replicasets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods", "endpoints", "services", "nodes", "namespaces"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["split.smi-spec.io"]
  resources: ["trafficsplits"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-destination
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-linkerd-destination
subjects:
- kind: ServiceAccount
  name: linkerd-destination
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-destination
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-sp-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUpoOWZiOFpaOCtOWUxOQm1HbXl1UUV3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3TlRBNU1qRTBNVFUwV2hjTk1qTXdOVEE1TWpFME1UVTBXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxrT2sxZENZQmRqRzRQVTZPNDFFQUs0VmhEeUJKeWdSMW8rclkvY1V3ajRPdUd6SGkwVQpHNlRpZlRibEVaZGlBL3JoOUtYR3c0THdoRzMvT0Zsc1FQeXRwNEJhYk5oSXozM2JZeTVacDd4L3p4M3N0V2dKCnRreEhmOUhPQUR6T3NWWE80NE54dmN3LzdjckJnMmFmaml4b3BHY3NTdmUweEpmYUpEc1NxeXphOEVzcTZIZEcKWTV5bFBHN0g3R2hvK2JPWWlnT2l0T1pkbkgxdUZ5ckp5QjhkM0ExL2RUamkrbDQ4dlY1TU5jZXZCSVZxNWhaUwp3SVpZTFJ3T3p6NVdnSVJkc2ZCUVRGazlNNVRWdnMwd3ozN0FTejJyWkcrWmhLOC8vKzhYK0RsMmlaY2owT1N2Cnp4SHhtaWxybzRUTTVQVmwwYWpFM29LQXBiQWcrMGFyZUdNQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBa1dJNFBjUlFJbjFVakFLTVhnWkdRd3JXU01VUGQ1QS9BbjJTT0MwYnEKM05IcDV3T1Bxd0pBQXU1QWM4NUlSWTNsSjZUV010ZjRsL2VCRkIrWisxa3hWbklQKzVoUUxJd3pyMTBydlNibAphTlNFOHZPTk1hRTl5eUZkSEhnVkc1YmtZQjBZN3ZOWlN0eWRXeGZEcUNmU2hldG4ybDJwcjB0d1hnbmVWeEV1CldOWVJNR2NDSmRVK3NsVjRPMGpEWmppSWIvK1VjNnREN1JnMzB3OHc2S1hNL0kxU0xCeTAxeFRuUytXRU41K00KVGR0dkZLSWVhT0ZFNmVqTU1tWjEyamVUTmcyNXEwQkxtSWJvSWc4aUE0Skp2ZGRGZWYyMnNjZ2ZzdGR1VjVlUQp6eWQyeitVY084SFJ0OEd3YWN4NGNkVm9EUW9VVFNPZHNXYk15cWZ0cmowbgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBdVE2VFYwSmdGMk1iZzlUbzdqVVFBcmhXRVBJRW5LQkhXajZ0ajl4VENQZzY0Yk1lCkxSUWJwT0o5TnVVUmwySUQrdUgwcGNiRGd2Q0ViZjg0V1d4QS9LMm5nRnBzMkVqUGZkdGpMbG1udkgvUEhleTEKYUFtMlRFZC8wYzRBUE02eFZjN2pnM0c5ekQvdHlzR0RacCtPTEdpa1p5eEs5N1RFbDlva094S3JMTnJ3U3lybwpkMFpqbktVOGJzZnNhR2o1czVpS0E2SzA1bDJjZlc0WEtzbklIeDNjRFg5MU9PTDZYank5WGt3MXg2OEVoV3JtCkZsTEFobGd0SEE3UFBsYUFoRjJ4OEZCTVdUMHpsTlcrelREUGZzQkxQYXRrYjVtRXJ6Ly83eGY0T1hhSmx5UFEKNUsvUEVmR2FLV3VqaE16azlXWFJxTVRlZ29DbHNDRDdScXQ0WXdJREFRQUJBb0lCQUFjaFBhSUdCNmUvQk1kZQpnNTd4NG0wSVp5QitBcGw2UDJXRnRyQXRQL0cvaHAwOWhuTWNMRGg5RlcveEFXMkF0RUNOUmh6QS9MVmx5T1JvCkNlYkFHZnppUCtyZEVRYUFQNlpNdHBTSmxjSFlkc1ZqWWxYZzBlbzhjdnRGWVpMMkw3VHJwSzVpeW5vOUdFOVEKaDF5RDF6bDB5cWpDOXh4MkZZRDRRWjhaQ0FsUlVUL3YraGJIc3ZUNTRsYksyUUNDVWk4MElkeVFSelpjWjZkYwpRVmwzRDdtU1g2ZjhTV091MlNWaXQ5RWEwS1U2eDJaZ24zVlVESlVpdlBwK2VJRGlKMm84VGpDRmI1V25ZbWlNCnhadnlBdThiaGowb2FPNXlRdHJ0azY2emorcktxT2VSeWp0U2FDT0xRem5JMXBZYzRHWUREbElWUWgrSlIxRDkKUVI4SXBwa0NnWUVBOUpFWkdnZUtYdlE5RTc1V25LN2Y4RHo0a2IwQ0paOWtmQnFGUGhudVRmS250am8zVk1hWgozTC9KSUhOcjdRenVnUXFPMTFJS2RWbGJ0cjVLUnJNM2dqaWpDRUludHRMeGZwUnd0cU1kbHJ0RzRhaGczTFlKCkdzMDF0aDk2VGVJd1BWenZwUER3blN3VGJkbnFObnV0MzU5SmxqYXJ1RXhqd3duS1VVTm9GM1VDZ1lFQXdiVkkKQzVqUlBBd3YyNUV5WHhscDhVZkFuQXViTlh4WFVBL0lPeUowOU9OYUpGNlhrMUhyV2RHUVl0ZFlqYXJraXhGcQphNlF4WTdGRE4rT05SemNCVzd2OThLc050TDRQcmgwcmg2S3BZd2VQTE9LVlBpSVMzZk52VHZRWEVESzNrNjVzClhCbGwwN2NXa1M5Y0ZBWUlYQ0piZHFRZjBlRUNWazNmT0ZSbExYY0NnWUVBaEQrK01pd25zQWNreS90ZVBLWDMKNUtJanpETkg2TzVUV1NUQ0xuMjVOcDlqLzQ5bGdrdE93bWRYTEZ3ZDNYYmp0aFh1ZmhNWUlyTHFmRnhVTC8wVApwREJhUU1uOVRjaXQzRVFLMjBoRFpOSHFsM1lFd3ZVUTRWUmNtaHBWZWE0NVpjVk90WU93cVYwL09HVGhXUXJ5ClQvMkR2bDNiNS9JdTlEWGtHS041czAwQ2dZQVJqUTFVRDZxVm1EMFYxZGdNaWM3eGo2RENBc016VzJyRjFFZysKSTJjWmNTZ1B0NHBnVE1IWVI0YWZqZ2QxL28vcWtjOWtwV0hjT0lsd25PdUdFbFBMTGdOYU5RVnU1UEdpd3YzWQpza0pLdUxxZVJJRmxPYzBmMHhpNHZLRUNWTFlSYVhKai9lRWVCNjdCeE5yQTdiTUFOaFMzY1RONDNyeEplWkRLCkY4dDdEUUtCZ0REQlgvTUdHdWx2QTY1KzM5Q01qRWVpTkNCcXcyTUJUNEMwVDV1ckJPQmFta2VYSGhpTm82MlcKMGZJczgyelpvNGRoV0JOOTgvdnBhalErNXBVczN2bllTNDlDTzdSckpWSVJPcGh2ZHMzRWdudnR5Sjc0dXZCMQpUNlpvK080a2NpeUc3RDRDTkhjZ3djRHFmZGFBTzJ4MXgwMXo3MG4zWGZic1VXVkdEMUZLCi0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0t
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-sp-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-sp-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-sp-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURUVENDQWpXZ0F3SUJBZ0lSQUpoOWZiOFpaOCtOWUxOQm1HbXl1UUV3RFFZSktvWklodmNOQVFFTEJRQXcKS3pFcE1DY0dBMVVFQXhNZ2JHbHVhMlZ5WkMxemNDMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13SGhjTgpNakl3TlRBNU1qRTBNVFUwV2hjTk1qTXdOVEE1TWpFME1UVTBXakFyTVNrd0p3WURWUVFERXlCc2FXNXJaWEprCkxYTndMWFpoYkdsa1lYUnZjaTVzYVc1clpYSmtMbk4yWXpDQ0FTSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnRVAKQURDQ0FRb0NnZ0VCQUxrT2sxZENZQmRqRzRQVTZPNDFFQUs0VmhEeUJKeWdSMW8rclkvY1V3ajRPdUd6SGkwVQpHNlRpZlRibEVaZGlBL3JoOUtYR3c0THdoRzMvT0Zsc1FQeXRwNEJhYk5oSXozM2JZeTVacDd4L3p4M3N0V2dKCnRreEhmOUhPQUR6T3NWWE80NE54dmN3LzdjckJnMmFmaml4b3BHY3NTdmUweEpmYUpEc1NxeXphOEVzcTZIZEcKWTV5bFBHN0g3R2hvK2JPWWlnT2l0T1pkbkgxdUZ5ckp5QjhkM0ExL2RUamkrbDQ4dlY1TU5jZXZCSVZxNWhaUwp3SVpZTFJ3T3p6NVdnSVJkc2ZCUVRGazlNNVRWdnMwd3ozN0FTejJyWkcrWmhLOC8vKzhYK0RsMmlaY2owT1N2Cnp4SHhtaWxybzRUTTVQVmwwYWpFM29LQXBiQWcrMGFyZUdNQ0F3RUFBYU5zTUdvd0RnWURWUjBQQVFIL0JBUUQKQWdXZ01CMEdBMVVkSlFRV01CUUdDQ3NHQVFVRkJ3TUJCZ2dyQmdFRkJRY0RBakFNQmdOVkhSTUJBZjhFQWpBQQpNQ3NHQTFVZEVRUWtNQ0tDSUd4cGJtdGxjbVF0YzNBdGRtRnNhV1JoZEc5eUxteHBibXRsY21RdWMzWmpNQTBHCkNTcUdTSWIzRFFFQkN3VUFBNElCQVFBa1dJNFBjUlFJbjFVakFLTVhnWkdRd3JXU01VUGQ1QS9BbjJTT0MwYnEKM05IcDV3T1Bxd0pBQXU1QWM4NUlSWTNsSjZUV010ZjRsL2VCRkIrWisxa3hWbklQKzVoUUxJd3pyMTBydlNibAphTlNFOHZPTk1hRTl5eUZkSEhnVkc1YmtZQjBZN3ZOWlN0eWRXeGZEcUNmU2hldG4ybDJwcjB0d1hnbmVWeEV1CldOWVJNR2NDSmRVK3NsVjRPMGpEWmppSWIvK1VjNnREN1JnMzB3OHc2S1hNL0kxU0xCeTAxeFRuUytXRU41K00KVGR0dkZLSWVhT0ZFNmVqTU1tWjEyamVUTmcyNXEwQkxtSWJvSWc4aUE0Skp2ZGRGZWYyMnNjZ2ZzdGR1VjVlUQp6eWQyeitVY084SFJ0OEd3YWN4NGNkVm9EUW9VVFNPZHNXYk15cWZ0cmowbgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  failurePolicy: Fail
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["linkerd.io"]
    apiVersions: ["v1alpha1", "v1alpha2"]
    resources: ["serviceprofiles"]
  sideEffects: None
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-policy-validator-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRQlpWb3h0SmxBYmtTcHA1OVFCVE5WekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd05UQTVNakUwTVRVMVdoY05Nak13TlRBNU1qRTBNVFUxV2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURKK0d5RFF3T01sakgzbTVuWllUZ2JlTnlia3B0UW0rN2w0UGhhYnE5VQpZSjFndG4vcGFZUUFKem4wbW91azFEOHJwUU9XbnZ0U3Q0VExvbUUzNFkwWkEvOFk4cVVoeGQ4L3NZYXlRRXpFCnNDT0N2VTExQ3BqMmZtS3JEVFRyYkVGTVlqZnh3c1ZXOE5CNjZVZWRZeUZ0WUQ0SUV1b2R5aTc3QXAremo4d2kKV2ozUHB6UWRXS1NjSGhrcDk0ejN2UFk3MmRXM1dNNXVBSUxRbzFtaEFUVk80Q0Y3VG84OVVjM3lRRFg1QVRoVwo2ektGc0cybGUxNVkzaWdIb2ovSUdNRE5WZ1FYK3BUdDNCRHRtS1BrZ0hlS1orNVZ5RGFkYkpJczJhdUY3dmkyCkJ3SnBEa2p4Q29VOU1JWnh0MlVWYXhIMkUwdmg5cVE0RHNheE5yelpmQVF6QWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLcjI0YUhCZXFsTVM2NWsxMUUwK2dEQjU0YTIKUkJ3bnhqQlVzZm1KckhFeE9KeWhsdG1jN1FDTmo3eGhUMDFwUlJ6ZEUwMGR0L01rNG1EdmViOWMwUjJEcG9QYwoxZ3JqTEpFYjdKenF1MUZsTGg3OGdoaW5sZkZ5UDV4ZzQvR1NEaG5sdE5OM3JoTG85c1dIMGhIVmJrdFg4bnZ6ClFGT2pLbEo2NzEyTzFCVHpuTGRTSzhpT3haS0VjNktidTFuU2EySjF4UFJ2YzlqU1JIQ0dmeUt1dCs4bGNzamUKb1N0QjhVMU12eFo0U08yLzZTRU45dkNORnRoeHBWb0RQekpsYlNacGFlaTgrVWRpRGlDUjI3cFNLQWVhUUpYQgpWdkZzYUMvRXlwTllwa0tTWXpXdWp1eUFraTM4UWdpVUlnMmlvMktlSit0UzZMa1Irb1ZQNmtvQTFJVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBeWZoc2cwTURqSll4OTV1WjJXRTRHM2pjbTVLYlVKdnU1ZUQ0V202dlZHQ2RZTFovCjZXbUVBQ2M1OUpxTHBOUS9LNlVEbHA3N1VyZUV5NkpoTitHTkdRUC9HUEtsSWNYZlA3R0dza0JNeExBamdyMU4KZFFxWTluNWlxdzAwNjJ4QlRHSTM4Y0xGVnZEUWV1bEhuV01oYldBK0NCTHFIY291K3dLZnM0L01JbG85ejZjMApIVmlrbkI0WktmZU05N3oyTzluVnQxak9iZ0NDMEtOWm9RRTFUdUFoZTA2UFBWSE44a0ExK1FFNFZ1c3loYkJ0CnBYdGVXTjRvQjZJL3lCakF6VllFRi9xVTdkd1E3WmlqNUlCM2ltZnVWY2cybld5U0xObXJoZTc0dGdjQ2FRNUkKOFFxRlBUQ0djYmRsRldzUjloTkw0ZmFrT0E3R3NUYTgyWHdFTXdJREFRQUJBb0lCQVFDVE1GRmNnNjBGZXJ2bAplR2R4clZFbmJEaFJ4RkVlT05Xc2YveGVZMFd4VjB1NkhLWXhZNjFJTTA0Z1BiVEJKZEQzcktWbDBtelVCbHhuCnp1bk13THFFWFk0K0R5OWE0b3BsTDZvN0kzTU84RktneC9hMzhrWXhkVC9RNnFvRFcveG1mem5JSGFxVlJxQ1kKd29OblpzUUlvdGZ5S0Y2bjRSM0YzazZtbklnbkM1TXE1amE1TWhuWFhuRmIwVmdyZWYrS2JVdmxhOGNwaXQ3dgplS3QrQUxueHdRYVE5NjVENGJPTTgyWFVnekl0Q1Nva2dvaHAxdTBHbXFtTkpraS9vTzJTR0hiajJ5a3RqdTZCCmE5ZjBDNko1cHJwTlVySllMTTBvd0JIQjdDelB1Z1RXRFhKaHZoOWtneHRBY3YxcUZYR0hCVmVtZ3IzQnBqeHkKVTVjeDZjQzVBb0dCQU82WHhUUXhtbDVrdzRBeDhBeWo5SUhDQXRieGxKQS9NSVZkZ3F4OVFCMXNaK0l3S3ZwdApkL3Nqa1FqZUw0aGlEdVN2dGtvZHpPUTZLczUxVWRtNzJJSittNUNnZlUvRElzYzE1bHNQeEtQZXZsdTltQjAxCmlrc3FYN0pzNWpzODhlN3FhWml5b2RhTlZGMUFNcCttV1A1ZllJYTU2YUNjM0x5QkYzZFFVSVMxQW9HQkFOaTAKcHI4bDdyNm9wRXllaTVxOHNEL0Fvc2dRZGRFNlhQWWU2R0ZWcW1ZMVJDRkp3L2ZObXU2WWQ4clJpc2FpTE0rRQptUDZCbjNiZWNPS0JTVUVYU2ZuakFKNkJpZ0xCK2tjak0xU1RUUDZ3UlZ0SFhwYW5jL1lDN092ZEt4MkpLeTJJCmhwTFNWUVFHbS9uVnJHSHN0elJ0VWRTZTh6bkFSckVDb2FhL2NoNUhBb0dCQUsyNHFBZld6aFZJdk9oTWRBSmcKSnBtTUQ5RTlXUFNtYmNmTlRHWVhWR1dZRnhPa0NzY0lpY0c4SmRBVkp2cmdtd043eFBpMk5nYy9Ld2ZrZUZKVwo2ZEFxSzA3azdCajFkZzhpZWJWNEI2OWhjYTBPb1FFemlKd3VJRHVqK3diSzIwVWdQUDdIb2ZxOE1OOHM3Uzg5ClNiTDg4eVZsbkd3cmlyVmVNUjNZeHFlNUFvR0JBTWs0aFpUOGJnSFBxakFURCtKd3p0K0R5aU1uVlo4Z0tHM0oKS1ZJb0wzK1VlbHpHbUJjamJYZWJUN0NlZmRRUGhyaHlrWFhSZXZidmViWjVBa0pVazdaYkdKb1dBc2Fvdy9NRwpOb1dUK1d5TTFQbjYvVk82emF4ajd3YmNhVXFWc2VnbjIzMjluSCtPZTRxeTQ4eFI5NVBRNXFrZHB3KzdBR2tnCjNtVnRZMVBGQW9HQVhqWlA4aTlTWWRZd1c3enBST1RQZWhJOGhLR3JjUWxHODgvMjVyRU9rOHNkeHZRdG5jcGIKbnRDL1Vva1ZQaUM1N0F4NGtrM1plU3VNYTdlenJ6Sm9qOTVKN0pPMFdXYm9HQndXVmVKUXRtbDdHVit3d3l3VApTS2NNbWF2TG9VNlp3cUFPbkVKTURhNSs5Zm1hSHdKVlVqbndHM3lhQ3lyYnZ5c000M2toUHZBPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  name: linkerd-policy-validator-webhook-config
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-policy-validator.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-policy-validator
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURXRENDQWtDZ0F3SUJBZ0lRQlpWb3h0SmxBYmtTcHA1OVFCVE5WekFOQmdrcWhraUc5dzBCQVFzRkFEQXYKTVMwd0t3WURWUVFERXlSc2FXNXJaWEprTFhCdmJHbGplUzEyWVd4cFpHRjBiM0l1YkdsdWEyVnlaQzV6ZG1NdwpIaGNOTWpJd05UQTVNakUwTVRVMVdoY05Nak13TlRBNU1qRTBNVFUxV2pBdk1TMHdLd1lEVlFRREV5UnNhVzVyClpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1YTJWeVpDNXpkbU13Z2dFaU1BMEdDU3FHU0liM0RRRUIKQVFVQUE0SUJEd0F3Z2dFS0FvSUJBUURKK0d5RFF3T01sakgzbTVuWllUZ2JlTnlia3B0UW0rN2w0UGhhYnE5VQpZSjFndG4vcGFZUUFKem4wbW91azFEOHJwUU9XbnZ0U3Q0VExvbUUzNFkwWkEvOFk4cVVoeGQ4L3NZYXlRRXpFCnNDT0N2VTExQ3BqMmZtS3JEVFRyYkVGTVlqZnh3c1ZXOE5CNjZVZWRZeUZ0WUQ0SUV1b2R5aTc3QXAremo4d2kKV2ozUHB6UWRXS1NjSGhrcDk0ejN2UFk3MmRXM1dNNXVBSUxRbzFtaEFUVk80Q0Y3VG84OVVjM3lRRFg1QVRoVwo2ektGc0cybGUxNVkzaWdIb2ovSUdNRE5WZ1FYK3BUdDNCRHRtS1BrZ0hlS1orNVZ5RGFkYkpJczJhdUY3dmkyCkJ3SnBEa2p4Q29VOU1JWnh0MlVWYXhIMkUwdmg5cVE0RHNheE5yelpmQVF6QWdNQkFBR2pjREJ1TUE0R0ExVWQKRHdFQi93UUVBd0lGb0RBZEJnTlZIU1VFRmpBVUJnZ3JCZ0VGQlFjREFRWUlLd1lCQlFVSEF3SXdEQVlEVlIwVApBUUgvQkFJd0FEQXZCZ05WSFJFRUtEQW1naVJzYVc1clpYSmtMWEJ2YkdsamVTMTJZV3hwWkdGMGIzSXViR2x1CmEyVnlaQzV6ZG1Nd0RRWUpLb1pJaHZjTkFRRUxCUUFEZ2dFQkFLcjI0YUhCZXFsTVM2NWsxMUUwK2dEQjU0YTIKUkJ3bnhqQlVzZm1KckhFeE9KeWhsdG1jN1FDTmo3eGhUMDFwUlJ6ZEUwMGR0L01rNG1EdmViOWMwUjJEcG9QYwoxZ3JqTEpFYjdKenF1MUZsTGg3OGdoaW5sZkZ5UDV4ZzQvR1NEaG5sdE5OM3JoTG85c1dIMGhIVmJrdFg4bnZ6ClFGT2pLbEo2NzEyTzFCVHpuTGRTSzhpT3haS0VjNktidTFuU2EySjF4UFJ2YzlqU1JIQ0dmeUt1dCs4bGNzamUKb1N0QjhVMU12eFo0U08yLzZTRU45dkNORnRoeHBWb0RQekpsYlNacGFlaTgrVWRpRGlDUjI3cFNLQWVhUUpYQgpWdkZzYUMvRXlwTllwa0tTWXpXdWp1eUFraTM4UWdpVUlnMmlvMktlSit0UzZMa1Irb1ZQNmtvQTFJVT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
  failurePolicy: Fail
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: ["CREATE", "UPDATE"]
    apiGroups: ["policy.linkerd.io"]
    apiVersions: ["v1alpha1", "v1beta1"]
    resources:
    - serverauthorizations
    - servers
  sideEffects: None
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
rules:
  - apiGroups:
      - ""
    resources:
      - pods
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - policy.linkerd.io
    resources:
      - servers
      - serverauthorizations
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-destination-policy
  labels:
    app.kubernetes.io/part-of: Linkerd
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: linkerd-policy
subjects:
  - kind: ServiceAccount
    name: linkerd-destination
    namespace: linkerd
---
###
### Heartbeat RBAC
###
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
  resourceNames: ["linkerd-config"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: Role
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["list"]
- apiGroups: ["linkerd.io"]
  resources: ["serviceprofiles"]
  verbs: ["list"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: linkerd-heartbeat
  labels:
    linkerd.io/control-plane-ns: linkerd
roleRef:
  kind: ClusterRole
  name: linkerd-heartbeat
  apiGroup: rbac.authorization.k8s.io
subjects:
- kind: ServiceAccount
  name: linkerd-heartbeat
  namespace: linkerd
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: servers.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    helm.sh/chart: linkerd2-0.1.0
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  names:
    kind: Server
    plural: servers
    singular: server
    shortNames: [srv]
  scope: Namespaced
  versions:
    - name: v1alpha1
      served: true
      storage: false
      deprecated: true
      deprecationWarning: "policy.linkerd.io/v1alpha1 Server is deprecated; use policy.linkerd.io/v1beta1 Server"
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.
                  oneOf:
                    - required: [matchExpressions]
                    - required: [matchLabels]
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              type: object
              required:
                - podSelector
                - port
              properties:
                podSelector:
                  type: object
                  description: >-
                    Selects pods in the same namespace.

                    The result of matchLabels and matchExpressions are ANDed.
                    Selects all if empty.
                  properties:
                    matchLabels:
                      type: object
                      x-kubernetes-preserve-unknown-fields: true
                    matchExpressions:
                      type: array
                      items:
                        type: object
                        required: [key, operator]
                        properties:
                          key:
                            type: string
                          operator:
                            type: string
                            enum: [In, NotIn, Exists, DoesNotExist]
                          values:
                            type: array
                            items:
                              type: string
                port:
                  description: >-
                    A port name or number. Must exist in a pod spec.
                  x-kubernetes-int-or-string: true
                proxyProtocol:
                  description: >-
                    Configures protocol discovery for inbound connections.

                    Supersedes the `config.linkerd.io/opaque-ports` annotation.
                  type: string
                  default: unknown
                  enum:
                    - unknown
                    - HTTP/1
                    - HTTP/2
                    - gRPC
                    - opaque
                    - TLS
      additionalPrinterColumns:
      - name: Port
        type: string
        description: The port the server is listening on
        jsonPath: .spec.port
      - name: Protocol
        type: string
        description: The protocol of the server
        jsonPath: .spec.proxyProtocol
---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serverauthorizations.policy.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: policy.linkerd.io
  scope: Namespaced
  names:
    kind: ServerAuthorization
    plural: serverauthorizations
    singular: serverauthorization
    shortNames: [saz]
  versions:
    - name: v1alpha1
      served: true
      storage: false
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          required: [spec]
          properties:
            spec:
              description: >-
                Authorizes clients to communicate with Linkerd-proxied servers.
              type: object
              required: [server, client]
              properties:
                server:
                  description: >-
                    Identifies servers in the same namespace for which this
                    authorization applies.

                    Only one of `name` or `selector` may be specified.
                  type: object
                  oneOf:
                    - required: [name]
                    - required: [selector]
                  properties:
                    name:
                      description: References a `Server` instance by name
                      type: string
                      pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                    selector:
                      description: >-
                        A label query over servers on which this authorization applies.
                      type: object
                      properties:
                        matchLabels:
                          type: object
                          x-kubernetes-preserve-unknown-fields: true
                        matchExpressions:
                          type: array
                          items:
                            type: object
                            required: [key, operator]
                            properties:
                              key:
                                type: string
                              operator:
                                type: string
                                enum: [In, NotIn, Exists, DoesNotExist]
                              values:
                                type: array
                                items:
                                  type: string
                client:
                  description:  Describes clients authorized to access a server.
                  type: object
                  properties:
                    networks:
                      description: >-
                        Limits the client IP addresses to which this
                        authorization applies. If unset, the server chooses a
                        default (typically, all IPs or the cluster's pod
                        network).
                      type: array
                      items:
                        type: object
                        required: [cidr]
                        properties:
                          cidr:
                            type: string
                          except:
                            type: array
                            items:
                              type: string
                    unauthenticated:
                      description: >-
                        Authorizes unauthenticated clients to access a server.
                      type: boolean
                    meshTLS:
                      type: object
                      properties:
                        unauthenticatedTLS:
                          type: boolean
                          description: >-
                            Indicates that no client identity is required for
                            communication.

                            This is mostly important for the identity
                            controller, which must terminate TLS connections
                            from clients that do not yet have a certificate.
                        identities:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            strings (as provided via MTLS)

                            The `*` prefix can be used to match all identities in
                            a domain. An identity string of `*` indicates that
                            all authentication clients are authorized.
                          type: array
                          items:
                            type: string
                            pattern: '^(\*|[a-z0-9]([-a-z0-9]*[a-z0-9])?)(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$'
                        serviceAccounts:
                          description: >-
                            Authorizes clients with the provided proxy identity
                            service accounts (as provided via MTLS)
                          type: array
                          items:
                            type: object
                            required: [name]
                            properties:
                              name:
                                description: The ServiceAccount's name.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
                              namespace:
                                description: >-
                                  The ServiceAccount's namespace. If unset, the
                                  authorization's namespace is used.
                                type: string
                                pattern: '^[a-z0-9]([-a-z0-9]*[a-z0-9])?$'
      additionalPrinterColumns:
      - name: Server
        type: string
        description: The server that this grants access to
        jsonPath: .spec.server.name
---
###
### Service Profile CRD
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: serviceprofiles.linkerd.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: linkerd.io
  versions:
  - name: v1alpha1
    served: true
    storage: false
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            required:
            - routes
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  - name: v1alpha2
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            description: Spec is the custom resource spec
            properties:
              dstOverrides:
                type: array
                required:
                - authority
                - weight
                items:
                  type: object
                  description: WeightedDst is a weighted alternate destination.
                  properties:
                    authority:
                      type: string
                    weight:
                      x-kubernetes-int-or-string: true
                      anyOf:
                      - type: integer
                      - type: string
                      pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
              opaquePorts:
                type: array
                items:
                  type: string
              retryBudget:
                type: object
                required:
                - minRetriesPerSecond
                - retryRatio
                - ttl
                description: RetryBudget describes the maximum number of retries that should be issued to this service.
                properties:
                  minRetriesPerSecond:
                    format: int32
                    type: integer
                  retryRatio:
                    type: number
                    format: float
                  ttl:
                    type: string
              routes:
                type: array
                items:
                  type: object
                  description: RouteSpec specifies a Route resource.
                  required:
                  - condition
                  - name
                  properties:
                    condition:
                      type: object
                      description: RequestMatch describes the conditions under which to match a Route.
                      properties:
                        pathRegex:
                          type: string
                        method:
                          type: string
                        all:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        any:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                        not:
                          type: array
                          items:
                            type: object
                            x-kubernetes-preserve-unknown-fields: true
                    isRetryable:
                      type: boolean
                    name:
                      type: string
                    timeout:
                      type: string
                    responseClasses:
                      type: array
                      items:
                        type: object
                        required:
                        - condition
                        description: ResponseClass describes how to classify a response (e.g. success or failures).
                        properties:
                          condition:
                            type: object
                            description: ResponseMatch describes the conditions under
                              which to classify a response.
                            properties:
                              all:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              any:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              not:
                                type: array
                                items:
                                  type: object
                                  x-kubernetes-preserve-unknown-fields: true
                              status:
                                type: object
                                description: Range describes a range of integers (e.g. status codes).
                                properties:
                                  max:
                                    format: int32
                                    type: integer
                                  min:
                                    format: int32
                                    type: integer
                          isFailure:
                            type: boolean
  scope: Namespaced
  preserveUnknownFields: false
  names:
    plural: serviceprofiles
    singular: serviceprofile
    kind: ServiceProfile
    shortNames:
    - sp
---
###
### TrafficSplit CRD
### Copied from github.com/servicemeshinterface/smi-sdk-go/blob/d4e76b1cd7a33ead5f38d1262dd838a31c80f4e5/crds/split.yaml
###
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: trafficsplits.split.smi-spec.io
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    linkerd.io/control-plane-ns: linkerd
spec:
  group: split.smi-spec.io
  scope: Namespaced
  conversion:
    strategy: None
  names:
    kind: TrafficSplit
    listKind: TrafficSplitList
    shortNames:
      - ts
    plural: trafficsplits
    singular: trafficsplit
  versions:
    - name: v1alpha1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required:
                - service
                - backends
              properties:
                service:
                  description: The apex service of this split.
                  type: string
                backends:
                  description: The backend services of this split.
                  type: array
                  items:
                    type: object
                    required: ['service', 'weight']
                    properties:
                      service:
                        description: Name of the Kubernetes service.
                        type: string
                      weight:
                        description: Traffic weight value of this backend.
                        x-kubernetes-int-or-string: true
      additionalPrinterColumns:
      - name: Service
        type: string
        description: The apex service of this split.
        jsonPath: .spec.service
    - name: v1alpha2
      served: true
      storage: false
      additionalPrinterColumns:
      - name: Service
        type: string
        description: The apex service of this split.
        jsonPath: .spec.service
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              required:
                - service
                - backends
              properties:
                service:
                  description: The apex service of this split.
                  type: string
                backends:
                  description: The backend services of this split.
                  type: array
                  items:
                    type: object
                    required: ['service', 'weight']
                    properties:
                      service:
                        description: Name of the Kubernetes service.
                        type: string
                      weight:
                        description: Traffic weight value of this backend.
                        type: number
  preserveUnknownFields: false
---
###
### Proxy Injector RBAC
###
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["create", "patch"]
- apiGroups: [""]
  resources: ["namespaces", "replicationcontrollers"]
  verbs: ["list", "get", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list", "watch"]
- apiGroups: ["extensions", "apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["list", "get", "watch"]
- apiGroups: ["extensions", "batch"]
  resources: ["cronjobs", "jobs"]
  verbs: ["list", "get", "watch"]
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: linkerd-linkerd-proxy-injector
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
subjects:
- kind: ServiceAccount
  name: linkerd-proxy-injector
  namespace: linkerd
  apiGroup: ""
roleRef:
  kind: ClusterRole
  name: linkerd-linkerd-proxy-injector
  apiGroup: rbac.authorization.k8s.io
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-proxy-injector-k8s-tls
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUoweDFBVUlGZXFZZFkrUUloTFZGUm93RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBMU1Ea3lNVFF4TlRSYUZ3MHlNekExTURreU1UUXhOVFJhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQysxek1CSkhVT2NHNk1DckxYTFdqSWVMYzNJaTZXU2h3WFNKWmNQaXQwTlg1YQo2cDljWlROWVJ2RTBGRDhyaHBwU2t1bjJjK0c3bzhDRk5aK0RMKytHaFgwdzMxUDczeG52YmkvQTlObnBPU2xvCm82WlZjcnExNjRldkNKbzh0bTBSTUMrSFhHamZ4NUpIc3JVRituaFZYMm1zY3BuSk5xTDlwajg1N1FDd05BZlIKSXNjSWZheVQ3VWpkamR0Z3BCTzFERE5YRzNSRDc5ZXN4RW9wRkRHKzB6VVRvWGFjZ3dhM3E1QmRZTGJ3ZXhMLwp2VkZKT056VFVTWHR6WUFvcDIzRTcvVlNocnUvMHpYOHdGWWo2dWNFdW82Zm1La0t3TUhwQ3pFWkJmaW9nN0l5CmlxZVB5SjdNZGtpZUY4V1ZrUlpLbWdyaDR6eW01bjVVSWlQaEQ0TS9BZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUMzc3JBTTRKZllrWklNNThmMk4yUlVDeTR4RSt6VHB6SloKS1pPZFdpS0k0cUV4RlFnZnJBOFNaeFIwTzM3TjBocEtlZmdEUlFTNWd4VEVJcmR5amFFQjQyaEhHOUxUanVmQgpyWG9kdzZIZzVUQzVKK2xMUC9sa2F6U0pPQTloVUNFbmpGdy83OUo0QkxYeGU5b05KM1VMZEpJQWdlL284cSs1CjRGdWs0TzA5Q1NZSUt0RmlGSGVUcVNYOG9LU3FpMG8yZWFCeWJ0TDFNU3dPM3Z3UURtNTMyNDNTR09jcEQrb04KY0xWVktkd3gxMlN5NkN6NU1xb3ZzTmFPMTRsSXFKS3VRVU1WSjlIcGxER1BvWlV5Z2RPT0ZjTFIyYXVpYkpuMQo1RVJKS0MzbGpDdTBxM1lpZCtqUUJkV3RFWjFJQk1lc3YyM1ZJRDNNbGgrYyt6UVoxNHFjCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdnRjekFTUjFEbkJ1akFxeTF5MW95SGkzTnlJdWxrb2NGMGlXWEQ0cmREVitXdXFmClhHVXpXRWJ4TkJRL0s0YWFVcExwOW5QaHU2UEFoVFdmZ3kvdmhvVjlNTjlUKzk4WjcyNHZ3UFRaNlRrcGFLT20KVlhLNnRldUhyd2lhUExadEVUQXZoMXhvMzhlU1I3SzFCZnA0VlY5cHJIS1p5VGFpL2FZL09lMEFzRFFIMFNMSApDSDJzaysxSTNZM2JZS1FUdFF3elZ4dDBRKy9Yck1SS0tSUXh2dE0xRTZGMm5JTUd0NnVRWFdDMjhIc1MvNzFSClNUamMwMUVsN2MyQUtLZHR4Ty8xVW9hN3Y5TTEvTUJXSStybkJMcU9uNWlwQ3NEQjZRc3hHUVg0cUlPeU1vcW4KajhpZXpIWkluaGZGbFpFV1Nwb0s0ZU04cHVaK1ZDSWo0UStEUHdJREFRQUJBb0lCQUI2T0hCZDV1OWcwL2k0ago1R0I1WDhhQk5XeDVaNVllaFlMZzExb3JoZytVSlFmdmV0WnpTWlkvdll6R0ZSc2w4UDE1a2tZb1phTUNZK2V3Ckh6c0U2TWZVQmFoV2lYN1JTTGpDSHBrNVdzNXhuWVNvZHhCRlQwbWpUVlVqL25Yc0MyaHVHNTREbUxNRHBCTWcKdE1VaFJqVDlFdEZPZy9yb2FZNU5HT0J3WnVUUEdNRjBJai9SbkpTZVl2SlhqdGxIb1EzQVBpNk9JN2hPcWRtaQo0ejhsZXd2MzZ4cFhHYXlNdGtpb1M5b1BadUg2R3ZWTnJxTGx6aUhjTVErN3FtRWR0dkhoN0FScHd3MXRSeEtqCm41aGtEbkcyd0hYT3dXSnQ0MFF1VGQ1REZuRHZZeUUvWUlneHZFVHRQUXllbUdWM3lQb0tVNlpPRExyeUFuOXMKUy9zWGIva0NnWUVBOGtoc2QwZkp3SkpZTWcvajFNSFZlRnJkeWFUNWFkSEwyNmtsQ3FDNkdaa3MrR3VJQ2Q1WApiTVhnQi9QWGVTWklTNExkYUlGN3lTWmppaFRmdTZBTlVSS0h3c1hGMW9sdFU1blI2ZE9Md2JoMFl6eVdyNG9jClc4dWdzbVZ6bFFQbkJCOVhxL2RqS0o1dngwVlJDa3BmTmtHUU1qRkxrdTNsWSt6VjE3R0hWR3NDZ1lFQXlhVXYKdUNaTDFXaWpGRXdOeUF1aG9uZU1Ya0lxa3JmQ3lEWW50R1Q3ak9hMGxLenN6VXFLNEdVSWliSlV5ZXNQeTVPWQo0L1czY0x3U0tHQ1BRQW1pOTRBLzVVelFVOU1xbkgyT1haUGpJMytISXBEU0I0YkNYYmg0aGFwTlRiV1l3QjBMCkV3YnZBSGl4WWtybko3YWl3QTRJVVNYYVVMakVSU01LSlpxc29YMENnWUVBeEU3ME82MmFCZ05ObkxxTlFuMFAKcHlZUTRHcGdnR0l4eURpRHY5bTlFREt4WWxOV2RaQ0d5NmFFd0V6TndPYkkydzRjc2FtQWo5b2YrdWl3NDBocQpvYzdlMjJ6OXdMZTNNbTdHeTZ2UmFGUTVVWkx0RVN4WmovTXNzSDlOS0dkeURrQUsvRlpGTE1zN0RIM1lqUHIzCnJIRnhFWW9wanRKYzlCc1lwVnk5cHlNQ2dZQkhFa1RHZUNFRVgvUVN4RmViS1paWHlDRWVXOTNiaG85TnQrQzQKc1ZzRUo1Q0FVbzdJTUx6UUtHd2c5RXowT2poLy9VN0hFaVVNeEF6MlZFcEpQTnhHdGRwUGZJcDA4Um0wdklCQQpOVTY2aFVsaEFvQTBqT2ZXMXAwTUo2RkZnWHNNUTNCU3pYL1J2N2h0dDQ3UHJZeWhlcEN0NFZTWVhQYzRrd2dSCmh2blBsUUtCZ1FDbkV5ZVg3MTNja0J2MzZUSG15WFNDdlBtN1pwSFF5QzZkLy9aNVJ0T3RxcitiVWlYc1g3a0IKQW44NkljUStaR0RJbk91UEQrVnFUVUNLQm5GY0xDV2RUOXE3N00zSzlLUHArL2JaMFhRUTJBRTFhRm9IT3pRWgpWc0N2M2VaTTYrVVBPOERRU01UMk5nNXN6bGd0L2hNcnhVaVdIQ2xMc29qTjVMTUViNE9CYmc9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQ==
---
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: linkerd-proxy-injector-webhook-config
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
webhooks:
- name: linkerd-proxy-injector.linkerd.io
  namespaceSelector:
    matchExpressions:
    - key: config.linkerd.io/admission-webhooks
      operator: NotIn
      values:
      - disabled
  clientConfig:
    service:
      name: linkerd-proxy-injector
      namespace: linkerd
      path: "/"
    caBundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURVekNDQWp1Z0F3SUJBZ0lSQUoweDFBVUlGZXFZZFkrUUloTFZGUm93RFFZSktvWklodmNOQVFFTEJRQXcKTFRFck1Da0dBMVVFQXhNaWJHbHVhMlZ5WkMxd2NtOTRlUzFwYm1wbFkzUnZjaTVzYVc1clpYSmtMbk4yWXpBZQpGdzB5TWpBMU1Ea3lNVFF4TlRSYUZ3MHlNekExTURreU1UUXhOVFJhTUMweEt6QXBCZ05WQkFNVElteHBibXRsCmNtUXRjSEp2ZUhrdGFXNXFaV04wYjNJdWJHbHVhMlZ5WkM1emRtTXdnZ0VpTUEwR0NTcUdTSWIzRFFFQkFRVUEKQTRJQkR3QXdnZ0VLQW9JQkFRQysxek1CSkhVT2NHNk1DckxYTFdqSWVMYzNJaTZXU2h3WFNKWmNQaXQwTlg1YQo2cDljWlROWVJ2RTBGRDhyaHBwU2t1bjJjK0c3bzhDRk5aK0RMKytHaFgwdzMxUDczeG52YmkvQTlObnBPU2xvCm82WlZjcnExNjRldkNKbzh0bTBSTUMrSFhHamZ4NUpIc3JVRituaFZYMm1zY3BuSk5xTDlwajg1N1FDd05BZlIKSXNjSWZheVQ3VWpkamR0Z3BCTzFERE5YRzNSRDc5ZXN4RW9wRkRHKzB6VVRvWGFjZ3dhM3E1QmRZTGJ3ZXhMLwp2VkZKT056VFVTWHR6WUFvcDIzRTcvVlNocnUvMHpYOHdGWWo2dWNFdW82Zm1La0t3TUhwQ3pFWkJmaW9nN0l5CmlxZVB5SjdNZGtpZUY4V1ZrUlpLbWdyaDR6eW01bjVVSWlQaEQ0TS9BZ01CQUFHamJqQnNNQTRHQTFVZER3RUIKL3dRRUF3SUZvREFkQmdOVkhTVUVGakFVQmdnckJnRUZCUWNEQVFZSUt3WUJCUVVIQXdJd0RBWURWUjBUQVFILwpCQUl3QURBdEJnTlZIUkVFSmpBa2dpSnNhVzVyWlhKa0xYQnliM2g1TFdsdWFtVmpkRzl5TG14cGJtdGxjbVF1CmMzWmpNQTBHQ1NxR1NJYjNEUUVCQ3dVQUE0SUJBUUMzc3JBTTRKZllrWklNNThmMk4yUlVDeTR4RSt6VHB6SloKS1pPZFdpS0k0cUV4RlFnZnJBOFNaeFIwTzM3TjBocEtlZmdEUlFTNWd4VEVJcmR5amFFQjQyaEhHOUxUanVmQgpyWG9kdzZIZzVUQzVKK2xMUC9sa2F6U0pPQTloVUNFbmpGdy83OUo0QkxYeGU5b05KM1VMZEpJQWdlL284cSs1CjRGdWs0TzA5Q1NZSUt0RmlGSGVUcVNYOG9LU3FpMG8yZWFCeWJ0TDFNU3dPM3Z3UURtNTMyNDNTR09jcEQrb04KY0xWVktkd3gxMlN5NkN6NU1xb3ZzTmFPMTRsSXFKS3VRVU1WSjlIcGxER1BvWlV5Z2RPT0ZjTFIyYXVpYkpuMQo1RVJKS0MzbGpDdTBxM1lpZCtqUUJkV3RFWjFJQk1lc3YyM1ZJRDNNbGgrYyt6UVoxNHFjCi0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0=
  failurePolicy: Fail
  admissionReviewVersions: ["v1", "v1beta1"]
  rules:
  - operations: [ "CREATE" ]
    apiGroups: [""]
    apiVersions: ["v1"]
    resources: ["pods", "services"]
  sideEffects: None
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-config
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: controller
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
data:
  values: |
    cliVersion: linkerd/cli stable-2.11.2
    clusterDomain: cluster.local
    clusterNetworks: 10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
    cniEnabled: false
    controlPlaneTracing: false
    controlPlaneTracingNamespace: linkerd-jaeger
    controllerImage: cr.l5d.io/linkerd/controller
    controllerImageVersion: stable-2.11.2
    controllerLogFormat: plain
    controllerLogLevel: info
    controllerReplicas: 3
    controllerUID: 2103
    debugContainer:
      image:
        name: cr.l5d.io/linkerd/debug
        pullPolicy: ""
        version: stable-2.11.2
    destinationProxyResources: null
    destinationResources:
      cpu:
        limit: ""
        request: 100m
      memory:
        limit: 250Mi
        request: 50Mi
    disableHeartBeat: false
    enableEndpointSlices: false
    enableH2Upgrade: true
    enablePodAntiAffinity: true
    grafanaUrl: ""
    heartbeatResources:
      cpu:
        limit: ""
        request: 100m
      memory:
        limit: 250Mi
        request: 50Mi
    heartbeatSchedule: ""
    highAvailability: true
    identity:
      issuer:
        clockSkewAllowance: 20s
        externalCA: false
        issuanceLifetime: 24h0m0s
        scheme: linkerd.io/tls
        tls:
          crtPEM: |
            -----BEGIN CERTIFICATE-----
            MIIBiTCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
            eS5saW5rZXJkLjAeFw0yMjA1MDkxODQ1MDhaFw0yMzA1MDkxODQ1MjhaMBwxGjAY
            BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
            QgAEnUUJFvhis7KBzieRGZm2YVP5+8Aqqfc2krTqjww2wZW3oylzcEhqXwDKfSyA
            eFR88EY/cfSKg7juWzNZvpccDKNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
            MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
            BBSJfDdb6au300ifPZuZoty0n1SGHzAKBggqhkjOPQQDAgNJADBGAiEA8YdzGVgO
            2G5QKkyR1mVgScupT7MPjuMBd8IGHjaEpgoCIQDNYFu3V3YIIeItFkDChIQ3HHZ5
            5EsDuIEdcRPczwWSPg==
            -----END CERTIFICATE-----
    identityProxyResources: null
    identityResources:
      cpu:
        limit: ""
        request: 100m
      memory:
        limit: 250Mi
        request: 10Mi
    identityTrustAnchorsPEM: |
      -----BEGIN CERTIFICATE-----
      MIIBiTCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
      eS5saW5rZXJkLjAeFw0yMjA1MDkxODQ1MDhaFw0yMzA1MDkxODQ1MjhaMBwxGjAY
      BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
      QgAEnUUJFvhis7KBzieRGZm2YVP5+8Aqqfc2krTqjww2wZW3oylzcEhqXwDKfSyA
      eFR88EY/cfSKg7juWzNZvpccDKNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
      MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
      BBSJfDdb6au300ifPZuZoty0n1SGHzAKBggqhkjOPQQDAgNJADBGAiEA8YdzGVgO
      2G5QKkyR1mVgScupT7MPjuMBd8IGHjaEpgoCIQDNYFu3V3YIIeItFkDChIQ3HHZ5
      5EsDuIEdcRPczwWSPg==
      -----END CERTIFICATE-----
    identityTrustDomain: cluster.local
    imagePullPolicy: IfNotPresent
    imagePullSecrets: null
    installNamespace: true
    linkerdVersion: stable-2.11.2
    namespace: linkerd
    nodeSelector:
      kubernetes.io/os: linux
    podAnnotations: {}
    podLabels: {}
    policyController:
      defaultAllowPolicy: all-unauthenticated
      image:
        name: cr.l5d.io/linkerd/policy-controller
        pullPolicy: ""
        version: ""
      logLevel: linkerd=info,warn
      resources:
        cpu:
          limit: ""
          request: ""
        memory:
          limit: ""
          request: ""
    policyValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      keyPEM: ""
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    profileValidator:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    prometheusUrl: ""
    proxy:
      await: true
      capabilities: null
      defaultInboundPolicy: ""
      disableIdentity: false
      enableExternalProfiles: false
      image:
        name: cr.l5d.io/linkerd/proxy
        pullPolicy: ""
        version: stable-2.11.2
      inboundConnectTimeout: 100ms
      isGateway: false
      isIngress: false
      logFormat: plain
      logLevel: warn,linkerd=info
      opaquePorts: 25,587,3306,4444,5432,6379,9300,11211
      outboundConnectTimeout: 1000ms
      podInboundPorts: ""
      ports:
        admin: 4191
        control: 4190
        inbound: 4143
        outbound: 4140
      requireIdentityOnInboundPorts: ""
      resources:
        cpu:
          limit: ""
          request: 100m
        memory:
          limit: 250Mi
          request: 20Mi
      saMountPath: null
      uid: 2102
      waitBeforeExitSeconds: 0
    proxyContainerName: linkerd-proxy
    proxyInit:
      capabilities: null
      closeWaitTimeoutSecs: 0
      ignoreInboundPorts: 4567,4568,22,25,443,587,3306,4444,5432,6379,9300,11211,6443,27017,9200
      ignoreOutboundPorts: 4567,4568,22,25,443,587,3306,4444,5432,6379,9300,11211,6443,27017,9200
      image:
        name: cr.l5d.io/linkerd/proxy-init
        pullPolicy: ""
        version: v1.5.3
      logFormat: ""
      logLevel: ""
      resources:
        cpu:
          limit: 100m
          request: 10m
        memory:
          limit: 50Mi
          request: 10Mi
      runAsRoot: true
      saMountPath: null
      skipSubnets: ""
      xtMountPath:
        mountPath: /run
        name: linkerd-proxy-init-xtables-lock
        readOnly: false
    proxyInjector:
      caBundle: ""
      crtPEM: ""
      externalSecret: false
      namespaceSelector:
        matchExpressions:
        - key: config.linkerd.io/admission-webhooks
          operator: NotIn
          values:
          - disabled
    proxyInjectorProxyResources: null
    proxyInjectorResources:
      cpu:
        limit: ""
        request: 100m
      memory:
        limit: 250Mi
        request: 50Mi
    tolerations: null
    webhookFailurePolicy: Fail
---
###
### Identity Controller Service
###
---
kind: Secret
apiVersion: v1
metadata:
  name: linkerd-identity-issuer
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
data:
  crt.pem: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUJpVENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKZVM1c2FXNXJaWEprTGpBZUZ3MHlNakExTURreE9EUTFNRGhhRncweU16QTFNRGt4T0RRMU1qaGFNQnd4R2pBWQpCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNEClFnQUVuVVVKRnZoaXM3S0J6aWVSR1ptMllWUDUrOEFxcWZjMmtyVHFqd3cyd1pXM295bHpjRWhxWHdES2ZTeUEKZUZSODhFWS9jZlNLZzdqdVd6Tlp2cGNjREtOaE1GOHdEZ1lEVlIwUEFRSC9CQVFEQWdFR01CMEdBMVVkSlFRVwpNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCkJCU0pmRGRiNmF1MzAwaWZQWnVab3R5MG4xU0dIekFLQmdncWhrak9QUVFEQWdOSkFEQkdBaUVBOFlkekdWZ08KMkc1UUtreVIxbVZnU2N1cFQ3TVBqdU1CZDhJR0hqYUVwZ29DSVFETllGdTNWM1lJSWVJdEZrRENoSVEzSEhaNQo1RXNEdUlFZGNSUGN6d1dTUGc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  key.pem: LS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCk1IY0NBUUVFSURndHhMK3hKQy8xK0N0cEpPb3g5azRBS3dHdnQrekdlQjljbU5HL2JwMUNvQW9HQ0NxR1NNNDkKQXdFSG9VUURRZ0FFblVVSkZ2aGlzN0tCemllUkdabTJZVlA1KzhBcXFmYzJrclRxand3MndaVzNveWx6Y0VocQpYd0RLZlN5QWVGUjg4RVkvY2ZTS2c3anVXek5adnBjY0RBPT0KLS0tLS1FTkQgRUMgUFJJVkFURSBLRVktLS0tLQ==
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: linkerd-identity-trust-roots
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
data:
  ca-bundle.crt: |
    -----BEGIN CERTIFICATE-----
    MIIBiTCCAS6gAwIBAgIBATAKBggqhkjOPQQDAjAcMRowGAYDVQQDExFpZGVudGl0
    eS5saW5rZXJkLjAeFw0yMjA1MDkxODQ1MDhaFw0yMzA1MDkxODQ1MjhaMBwxGjAY
    BgNVBAMTEWlkZW50aXR5LmxpbmtlcmQuMFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcD
    QgAEnUUJFvhis7KBzieRGZm2YVP5+8Aqqfc2krTqjww2wZW3oylzcEhqXwDKfSyA
    eFR88EY/cfSKg7juWzNZvpccDKNhMF8wDgYDVR0PAQH/BAQDAgEGMB0GA1UdJQQW
    MBQGCCsGAQUFBwMBBggrBgEFBQcDAjAPBgNVHRMBAf8EBTADAQH/MB0GA1UdDgQW
    BBSJfDdb6au300ifPZuZoty0n1SGHzAKBggqhkjOPQQDAgNJADBGAiEA8YdzGVgO
    2G5QKkyR1mVgScupT7MPjuMBd8IGHjaEpgoCIQDNYFu3V3YIIeItFkDChIQ3HHZ5
    5EsDuIEdcRPczwWSPg==
    -----END CERTIFICATE-----
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-identity-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: identity
  ports:
  - name: grpc
    port: 8080
    targetPort: 8080
---
kind: PodDisruptionBudget
apiVersion: policy/v1beta1
metadata:
  name: linkerd-identity
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    app.kubernetes.io/name: identity
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    linkerd.io/control-plane-component: identity
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-identity
  namespace: linkerd
spec:
  replicas: 3
  selector:
    matchLabels:
      linkerd.io/control-plane-component: identity
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-identity
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        linkerd.io/created-by: linkerd/cli stable-2.11.2
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.2
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: identity
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-identity
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: linkerd.io/control-plane-component
                  operator: In
                  values:
                  - identity
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: linkerd.io/control-plane-component
                operator: In
                values:
                - identity
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - identity
        - -log-level=info
        - -log-format=plain
        - -controller-namespace=linkerd
        - -identity-trust-domain=cluster.local
        - -identity-issuance-lifetime=24h0m0s
        - -identity-clock-skew-allowance=20s
        - -identity-scheme=linkerd.io/tls
        - -enable-pprof=false
        env:
        - name: LINKERD_DISABLED
          value: "linkerd-await cannot block the identity controller"
        image: cr.l5d.io/linkerd/controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9990
          initialDelaySeconds: 10
        name: identity
        ports:
        - containerPort: 8080
          name: grpc
        - containerPort: 9990
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9990
        resources:
          limits:
            memory: "250Mi"
          requests:
            cpu: "100m"
            memory: "10Mi"
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/issuer
          name: identity-issuer
        - mountPath: /var/run/linkerd/identity/trust-roots/
          name: trust-roots
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_INBOUND_PORTS_REQUIRE_TLS
          value: "8080"
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8080,9990"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: localhost.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
          limits:
            memory: "250Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568,22,25,443,587,3306,4444,5432,6379,9300,11211,6443,27017,9200"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: false
          runAsUser: 0
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-identity
      volumes:
      - name: identity-issuer
        secret:
          secretName: linkerd-identity-issuer
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Destination Controller Service
###
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-dst-headless
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8086
    targetPort: 8086
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-sp-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: sp-validator
    port: 443
    targetPort: sp-validator
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  clusterIP: None
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: grpc
    port: 8090
    targetPort: 8090
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-policy-validator
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: destination
  ports:
  - name: policy-https
    port: 443
    targetPort: policy-https
---
kind: PodDisruptionBudget
apiVersion: policy/v1beta1
metadata:
  name: linkerd-dst
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
---
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    app.kubernetes.io/name: destination
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    linkerd.io/control-plane-component: destination
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-destination
  namespace: linkerd
spec:
  replicas: 3
  selector:
    matchLabels:
      linkerd.io/control-plane-component: destination
      linkerd.io/control-plane-ns: linkerd
      linkerd.io/proxy-deployment: linkerd-destination
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        checksum/config: f61d8b6d245ad521476b1a94ac5370edc32e13474cd5d630c55f0f32a582ded3
        linkerd.io/created-by: linkerd/cli stable-2.11.2
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.2
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: destination
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-destination
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: linkerd.io/control-plane-component
                  operator: In
                  values:
                  - destination
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: linkerd.io/control-plane-component
                operator: In
                values:
                - destination
            topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: localhost.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: localhost.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8086,8090,8443,9443,9990,9996,9997"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
          limits:
            memory: "250Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
                - /usr/lib/linkerd/linkerd-await
                - --timeout=2m
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - destination
        - -addr=:8086
        - -controller-namespace=linkerd
        - -enable-h2-upgrade=true
        - -log-level=info
        - -log-format=plain
        - -enable-endpoint-slices=false
        - -cluster-domain=cluster.local
        - -identity-trust-domain=cluster.local
        - -default-opaque-ports=25,587,3306,4444,5432,6379,9300,11211
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9996
          initialDelaySeconds: 10
        name: destination
        ports:
        - containerPort: 8086
          name: grpc
        - containerPort: 9996
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9996
        resources:
          limits:
            memory: "250Mi"
          requests:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          runAsUser: 2103
      - args:
        - sp-validator
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9997
          initialDelaySeconds: 10
        name: sp-validator
        ports:
        - containerPort: 8443
          name: sp-validator
        - containerPort: 9997
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9997
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: sp-tls
          readOnly: true
      - args:
        - --admin-addr=0.0.0.0:9990
        - --control-plane-namespace=linkerd
        - --grpc-addr=0.0.0.0:8090
        - --server-addr=0.0.0.0:9443
        - --server-tls-key=/var/run/linkerd/tls/tls.key
        - --server-tls-certs=/var/run/linkerd/tls/tls.crt
        - --cluster-networks=10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16
        - --identity-domain=cluster.local
        - --default-policy=all-unauthenticated
        - --log-level=linkerd=info,warn
        - --log-format=plain
        image: cr.l5d.io/linkerd/policy-controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: admin
        name: policy
        ports:
        - containerPort: 8090
          name: grpc
        - containerPort: 9990
          name: admin
        - containerPort: 9443
          name: policy-https
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: admin
          initialDelaySeconds: 10
        resources:
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/tls
          name: policy-tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568,22,25,443,587,3306,4444,5432,6379,9300,11211,6443,27017,9200"
        - --outbound-ports-to-ignore
        - "443"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: false
          runAsUser: 0
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-destination
      volumes:
      - name: sp-tls
        secret:
          secretName: linkerd-sp-validator-k8s-tls
      - name: policy-tls
        secret:
          secretName: linkerd-policy-validator-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
###
### Heartbeat
###
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: linkerd-heartbeat
  namespace: linkerd
  labels:
    app.kubernetes.io/name: heartbeat
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    linkerd.io/control-plane-component: heartbeat
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  concurrencyPolicy: Replace
  schedule: "51 21 * * *"
  successfulJobsHistoryLimit: 0
  jobTemplate:
    spec:
      template:
        metadata:
          labels:
            linkerd.io/control-plane-component: heartbeat
            linkerd.io/workload-ns: linkerd
          annotations:
            linkerd.io/created-by: linkerd/cli stable-2.11.2
        spec:
          nodeSelector:
            kubernetes.io/os: linux
          serviceAccountName: linkerd-heartbeat
          restartPolicy: Never
          containers:
          - name: heartbeat
            image: cr.l5d.io/linkerd/controller:stable-2.11.2
            imagePullPolicy: IfNotPresent
            env:
            - name: LINKERD_DISABLED
              value: "the heartbeat controller does not use the proxy"
            args:
            - "heartbeat"
            - "-controller-namespace=linkerd"
            - "-log-level=info"
            - "-log-format=plain"
            - "-prometheus-url=http://prometheus.linkerd-viz.svc.cluster.local:9090"
            resources:
              limits:
                memory: "250Mi"
              requests:
                cpu: "100m"
                memory: "50Mi"
            securityContext:
              runAsUser: 2103
---
###
### Proxy Injector
###
apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
  labels:
    app.kubernetes.io/name: proxy-injector
    app.kubernetes.io/part-of: Linkerd
    app.kubernetes.io/version: stable-2.11.2
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-proxy-injector
  namespace: linkerd
spec:
  replicas: 3
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
  strategy:
    rollingUpdate:
      maxUnavailable: 1
  template:
    metadata:
      annotations:
        checksum/config: 606a40592ff92c5d3c12c1363aa45d9129edf500b6ec2804c8d8d7ac5a42fd41
        linkerd.io/created-by: linkerd/cli stable-2.11.2
        linkerd.io/identity-mode: default
        linkerd.io/proxy-version: stable-2.11.2
        config.linkerd.io/opaque-ports: "8443"
        config.linkerd.io/default-inbound-policy: "all-unauthenticated"
      labels:
        linkerd.io/control-plane-component: proxy-injector
        linkerd.io/control-plane-ns: linkerd
        linkerd.io/workload-ns: linkerd
        linkerd.io/proxy-deployment: linkerd-proxy-injector
    spec:
      nodeSelector:
        kubernetes.io/os: linux
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: linkerd.io/control-plane-component
                  operator: In
                  values:
                  - proxy-injector
              topologyKey: failure-domain.beta.kubernetes.io/zone
            weight: 100
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: linkerd.io/control-plane-component
                operator: In
                values:
                - proxy-injector
            topologyKey: kubernetes.io/hostname
      containers:
      - env:
        - name: _pod_name
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: _pod_ns
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: _pod_nodeName
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        - name: LINKERD2_PROXY_LOG
          value: "warn,linkerd=info"
        - name: LINKERD2_PROXY_LOG_FORMAT
          value: "plain"
        - name: LINKERD2_PROXY_DESTINATION_SVC_ADDR
          value: linkerd-dst-headless.linkerd.svc.cluster.local.:8086
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_POLICY_SVC_ADDR
          value: linkerd-policy.linkerd.svc.cluster.local.:8090
        - name: LINKERD2_PROXY_POLICY_WORKLOAD
          value: "$(_pod_ns):$(_pod_name)"
        - name: LINKERD2_PROXY_INBOUND_DEFAULT_POLICY
          value: all-unauthenticated
        - name: LINKERD2_PROXY_POLICY_CLUSTER_NETWORKS
          value: "10.0.0.0/8,100.64.0.0/10,172.16.0.0/12,192.168.0.0/16"
        - name: LINKERD2_PROXY_INBOUND_CONNECT_TIMEOUT
          value: "100ms"
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_TIMEOUT
          value: "1000ms"
        - name: LINKERD2_PROXY_CONTROL_LISTEN_ADDR
          value: 0.0.0.0:4190
        - name: LINKERD2_PROXY_ADMIN_LISTEN_ADDR
          value: 0.0.0.0:4191
        - name: LINKERD2_PROXY_OUTBOUND_LISTEN_ADDR
          value: 127.0.0.1:4140
        - name: LINKERD2_PROXY_INBOUND_LISTEN_ADDR
          value: 0.0.0.0:4143
        - name: LINKERD2_PROXY_INBOUND_IPS
          valueFrom:
            fieldRef:
              fieldPath: status.podIPs
        - name: LINKERD2_PROXY_INBOUND_PORTS
          value: "8443,9995"
        - name: LINKERD2_PROXY_DESTINATION_PROFILE_SUFFIXES
          value: svc.cluster.local.
        - name: LINKERD2_PROXY_INBOUND_ACCEPT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_OUTBOUND_CONNECT_KEEPALIVE
          value: 10000ms
        - name: LINKERD2_PROXY_INBOUND_PORTS_DISABLE_PROTOCOL_DETECTION
          value: "25,587,3306,4444,5432,6379,9300,11211"
        - name: LINKERD2_PROXY_DESTINATION_CONTEXT
          value: |
            {"ns":"$(_pod_ns)", "nodeName":"$(_pod_nodeName)"}
        - name: _pod_sa
          valueFrom:
            fieldRef:
              fieldPath: spec.serviceAccountName
        - name: _l5d_ns
          value: linkerd
        - name: _l5d_trustdomain
          value: cluster.local
        - name: LINKERD2_PROXY_IDENTITY_DIR
          value: /var/run/linkerd/identity/end-entity
        - name: LINKERD2_PROXY_IDENTITY_TRUST_ANCHORS
          valueFrom:
            configMapKeyRef:
              name: linkerd-identity-trust-roots
              key: ca-bundle.crt
        - name: LINKERD2_PROXY_IDENTITY_TOKEN_FILE
          value: /var/run/secrets/kubernetes.io/serviceaccount/token
        - name: LINKERD2_PROXY_IDENTITY_SVC_ADDR
          value: linkerd-identity-headless.linkerd.svc.cluster.local.:8080
        - name: LINKERD2_PROXY_IDENTITY_LOCAL_NAME
          value: $(_pod_sa).$(_pod_ns).serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_IDENTITY_SVC_NAME
          value: linkerd-identity.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_DESTINATION_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        - name: LINKERD2_PROXY_POLICY_SVC_NAME
          value: linkerd-destination.linkerd.serviceaccount.identity.linkerd.cluster.local
        image: cr.l5d.io/linkerd/proxy:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /live
            port: 4191
          initialDelaySeconds: 10
        name: linkerd-proxy
        ports:
        - containerPort: 4143
          name: linkerd-proxy
        - containerPort: 4191
          name: linkerd-admin
        readinessProbe:
          httpGet:
            path: /ready
            port: 4191
          initialDelaySeconds: 2
        resources:
          limits:
            memory: "250Mi"
          requests:
            cpu: "100m"
            memory: "20Mi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsUser: 2102
        terminationMessagePolicy: FallbackToLogsOnError
        lifecycle:
          postStart:
            exec:
              command:
                - /usr/lib/linkerd/linkerd-await
                - --timeout=2m
        volumeMounts:
        - mountPath: /var/run/linkerd/identity/end-entity
          name: linkerd-identity-end-entity
      - args:
        - proxy-injector
        - -log-level=info
        - -log-format=plain
        - -enable-pprof=false
        image: cr.l5d.io/linkerd/controller:stable-2.11.2
        imagePullPolicy: IfNotPresent
        livenessProbe:
          httpGet:
            path: /ping
            port: 9995
          initialDelaySeconds: 10
        name: proxy-injector
        ports:
        - containerPort: 8443
          name: proxy-injector
        - containerPort: 9995
          name: admin-http
        readinessProbe:
          failureThreshold: 7
          httpGet:
            path: /ready
            port: 9995
        resources:
          limits:
            memory: "250Mi"
          requests:
            cpu: "100m"
            memory: "50Mi"
        securityContext:
          runAsUser: 2103
        volumeMounts:
        - mountPath: /var/run/linkerd/config
          name: config
        - mountPath: /var/run/linkerd/identity/trust-roots
          name: trust-roots
        - mountPath: /var/run/linkerd/tls
          name: tls
          readOnly: true
      initContainers:
      - args:
        - --incoming-proxy-port
        - "4143"
        - --outgoing-proxy-port
        - "4140"
        - --proxy-uid
        - "2102"
        - --inbound-ports-to-ignore
        - "4190,4191,4567,4568,22,25,443,587,3306,4444,5432,6379,9300,11211,6443,27017,9200"
        - --outbound-ports-to-ignore
        - "4567,4568,22,25,443,587,3306,4444,5432,6379,9300,11211,6443,27017,9200"
        image: cr.l5d.io/linkerd/proxy-init:v1.5.3
        imagePullPolicy: IfNotPresent
        name: linkerd-init
        resources:
          limits:
            cpu: "100m"
            memory: "50Mi"
          requests:
            cpu: "10m"
            memory: "10Mi"
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_ADMIN
            - NET_RAW
          privileged: false
          runAsNonRoot: false
          runAsUser: 0
          readOnlyRootFilesystem: true
        terminationMessagePolicy: FallbackToLogsOnError
        volumeMounts:
        - mountPath: /run
          name: linkerd-proxy-init-xtables-lock
      serviceAccountName: linkerd-proxy-injector
      volumes:
      - configMap:
          name: linkerd-config
        name: config
      - configMap:
          name: linkerd-identity-trust-roots
        name: trust-roots
      - name: tls
        secret:
          secretName: linkerd-proxy-injector-k8s-tls
      - emptyDir: {}
        name: linkerd-proxy-init-xtables-lock
      - emptyDir:
          medium: Memory
        name: linkerd-identity-end-entity
---
kind: Service
apiVersion: v1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
    config.linkerd.io/opaque-ports: "443"
spec:
  type: ClusterIP
  selector:
    linkerd.io/control-plane-component: proxy-injector
  ports:
  - name: proxy-injector
    port: 443
    targetPort: proxy-injector
---
kind: PodDisruptionBudget
apiVersion: policy/v1beta1
metadata:
  name: linkerd-proxy-injector
  namespace: linkerd
  labels:
    linkerd.io/control-plane-component: proxy-injector
    linkerd.io/control-plane-ns: linkerd
  annotations:
    linkerd.io/created-by: linkerd/cli stable-2.11.2
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      linkerd.io/control-plane-component: proxy-injector
---
apiVersion: v1
data:
  linkerd-config-overrides: Y29udHJvbGxlclJlcGxpY2FzOiAzCmRlc3RpbmF0aW9uUmVzb3VyY2VzOgogIGNwdToKICAgIGxpbWl0OiAiIgogICAgcmVxdWVzdDogMTAwbQogIG1lbW9yeToKICAgIGxpbWl0OiAyNTBNaQogICAgcmVxdWVzdDogNTBNaQplbmFibGVQb2RBbnRpQWZmaW5pdHk6IHRydWUKaGVhcnRiZWF0UmVzb3VyY2VzOgogIGNwdToKICAgIGxpbWl0OiAiIgogICAgcmVxdWVzdDogMTAwbQogIG1lbW9yeToKICAgIGxpbWl0OiAyNTBNaQogICAgcmVxdWVzdDogNTBNaQpoaWdoQXZhaWxhYmlsaXR5OiB0cnVlCmlkZW50aXR5OgogIGlzc3VlcjoKICAgIHRsczoKICAgICAgY3J0UEVNOiB8CiAgICAgICAgLS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCiAgICAgICAgTUlJQmlUQ0NBUzZnQXdJQkFnSUJBVEFLQmdncWhrak9QUVFEQWpBY01Sb3dHQVlEVlFRREV4RnBaR1Z1ZEdsMAogICAgICAgIGVTNXNhVzVyWlhKa0xqQWVGdzB5TWpBMU1Ea3hPRFExTURoYUZ3MHlNekExTURreE9EUTFNamhhTUJ3eEdqQVkKICAgICAgICBCZ05WQkFNVEVXbGtaVzUwYVhSNUxteHBibXRsY21RdU1Ga3dFd1lIS29aSXpqMENBUVlJS29aSXpqMERBUWNECiAgICAgICAgUWdBRW5VVUpGdmhpczdLQnppZVJHWm0yWVZQNSs4QXFxZmMya3JUcWp3dzJ3Wlczb3lsemNFaHFYd0RLZlN5QQogICAgICAgIGVGUjg4RVkvY2ZTS2c3anVXek5adnBjY0RLTmhNRjh3RGdZRFZSMFBBUUgvQkFRREFnRUdNQjBHQTFVZEpRUVcKICAgICAgICBNQlFHQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBUEJnTlZIUk1CQWY4RUJUQURBUUgvTUIwR0ExVWREZ1FXCiAgICAgICAgQkJTSmZEZGI2YXUzMDBpZlBadVpvdHkwbjFTR0h6QUtCZ2dxaGtqT1BRUURBZ05KQURCR0FpRUE4WWR6R1ZnTwogICAgICAgIDJHNVFLa3lSMW1WZ1NjdXBUN01QanVNQmQ4SUdIamFFcGdvQ0lRRE5ZRnUzVjNZSUllSXRGa0RDaElRM0hIWjUKICAgICAgICA1RXNEdUlFZGNSUGN6d1dTUGc9PQogICAgICAgIC0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0KICAgICAga2V5UEVNOiB8CiAgICAgICAgLS0tLS1CRUdJTiBFQyBQUklWQVRFIEtFWS0tLS0tCiAgICAgICAgTUhjQ0FRRUVJRGd0eEwreEpDLzErQ3RwSk9veDlrNEFLd0d2dCt6R2VCOWNtTkcvYnAxQ29Bb0dDQ3FHU000OQogICAgICAgIEF3RUhvVVFEUWdBRW5VVUpGdmhpczdLQnppZVJHWm0yWVZQNSs4QXFxZmMya3JUcWp3dzJ3Wlczb3lsemNFaHEKICAgICAgICBYd0RLZlN5QWVGUjg4RVkvY2ZTS2c3anVXek5adnBjY0RBPT0KICAgICAgICAtLS0tLUVORCBFQyBQUklWQVRFIEtFWS0tLS0tCmlkZW50aXR5UmVzb3VyY2VzOgogIGNwdToKICAgIGxpbWl0OiAiIgogICAgcmVxdWVzdDogMTAwbQogIG1lbW9yeToKICAgIGxpbWl0OiAyNTBNaQogICAgcmVxdWVzdDogMTBNaQppZGVudGl0eVRydXN0QW5jaG9yc1BFTTogfAogIC0tLS0tQkVHSU4gQ0VSVElGSUNBVEUtLS0tLQogIE1JSUJpVENDQVM2Z0F3SUJBZ0lCQVRBS0JnZ3Foa2pPUFFRREFqQWNNUm93R0FZRFZRUURFeEZwWkdWdWRHbDAKICBlUzVzYVc1clpYSmtMakFlRncweU1qQTFNRGt4T0RRMU1EaGFGdzB5TXpBMU1Ea3hPRFExTWpoYU1Cd3hHakFZCiAgQmdOVkJBTVRFV2xrWlc1MGFYUjVMbXhwYm10bGNtUXVNRmt3RXdZSEtvWkl6ajBDQVFZSUtvWkl6ajBEQVFjRAogIFFnQUVuVVVKRnZoaXM3S0J6aWVSR1ptMllWUDUrOEFxcWZjMmtyVHFqd3cyd1pXM295bHpjRWhxWHdES2ZTeUEKICBlRlI4OEVZL2NmU0tnN2p1V3pOWnZwY2NES05oTUY4d0RnWURWUjBQQVFIL0JBUURBZ0VHTUIwR0ExVWRKUVFXCiAgTUJRR0NDc0dBUVVGQndNQkJnZ3JCZ0VGQlFjREFqQVBCZ05WSFJNQkFmOEVCVEFEQVFIL01CMEdBMVVkRGdRVwogIEJCU0pmRGRiNmF1MzAwaWZQWnVab3R5MG4xU0dIekFLQmdncWhrak9QUVFEQWdOSkFEQkdBaUVBOFlkekdWZ08KICAyRzVRS2t5UjFtVmdTY3VwVDdNUGp1TUJkOElHSGphRXBnb0NJUUROWUZ1M1YzWUlJZUl0RmtEQ2hJUTNISFo1CiAgNUVzRHVJRWRjUlBjendXU1BnPT0KICAtLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCmltYWdlUHVsbFNlY3JldHM6IG51bGwKcHJveHk6CiAgcmVzb3VyY2VzOgogICAgY3B1OgogICAgICByZXF1ZXN0OiAxMDBtCiAgICBtZW1vcnk6CiAgICAgIGxpbWl0OiAyNTBNaQogICAgICByZXF1ZXN0OiAyME1pCnByb3h5SW5pdDoKICBpZ25vcmVJbmJvdW5kUG9ydHM6IDQ1NjcsNDU2OCwyMiwyNSw0NDMsNTg3LDMzMDYsNDQ0NCw1NDMyLDYzNzksOTMwMCwxMTIxMSw2NDQzLDI3MDE3LDkyMDAKICBpZ25vcmVPdXRib3VuZFBvcnRzOiA0NTY3LDQ1NjgsMjIsMjUsNDQzLDU4NywzMzA2LDQ0NDQsNTQzMiw2Mzc5LDkzMDAsMTEyMTEsNjQ0MywyNzAxNyw5MjAwCnByb3h5SW5qZWN0b3JSZXNvdXJjZXM6CiAgY3B1OgogICAgbGltaXQ6ICIiCiAgICByZXF1ZXN0OiAxMDBtCiAgbWVtb3J5OgogICAgbGltaXQ6IDI1ME1pCiAgICByZXF1ZXN0OiA1ME1pCndlYmhvb2tGYWlsdXJlUG9saWN5OiBGYWlsCg==
kind: Secret
metadata:
  creationTimestamp: null
  labels:
    linkerd.io/control-plane-ns: linkerd
  name: linkerd-config-overrides
  namespace: linkerd
